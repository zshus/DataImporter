// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package dataimporter.actions;

import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.thirdparty.org.json.JSONObject;
import com.mendix.webui.CustomJavaAction;
import dataimporter.implementation.service.DataProcessor;
import dataimporter.implementation.utils.DataImporterRuntimeException;
import dataimporter.proxies.ColumnAttributeMapping;
import dataimporter.proxies.Sheet;
import dataimporter.proxies.Template;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Locale;

public class DataImport extends CustomJavaAction<java.util.List<IMendixObject>>
{
	/** @deprecated use ExcelFile.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __ExcelFile;
	private final system.proxies.FileDocument ExcelFile;
	private final java.lang.String MappingTemplate;
	private final java.lang.String Entity;

	public DataImport(
		IContext context,
		IMendixObject _excelFile,
		java.lang.String _mappingTemplate,
		java.lang.String _entity
	)
	{
		super(context);
		this.__ExcelFile = _excelFile;
		this.ExcelFile = _excelFile == null ? null : system.proxies.FileDocument.initialize(getContext(), _excelFile);
		this.MappingTemplate = _mappingTemplate;
		this.Entity = _entity;
	}

	@java.lang.Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		// BEGIN USER CODE
        if (this.ExcelFile == null)
            throw new CoreException("You must upload a file document before the columns can be extracted.");
        var excelFile = getFile(this.getContext(), this.ExcelFile.getMendixObject());
        if (excelFile.length() == 0)
            throw new CoreException("Uploaded file document is empty.");
        if (this.MappingTemplate == null || this.MappingTemplate.isBlank())
            throw new CoreException("Mapping template is empty.");

        var mappingTemplate = getMendixObjectFromJOSN();
        String excelFileName = ((String) this.ExcelFile.getMendixObject().getValue(this.getContext(), "Name")).toLowerCase(Locale.ROOT);
        java.util.List<IMendixObject> importedList = new ArrayList<>();
        DataProcessor.startImport(this.getContext(), mappingTemplate.getMendixObject(), excelFile, excelFileName, importedList);
        return importedList;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "DataImport";
	}

	// BEGIN EXTRA CODE
    private Template getMendixObjectFromJOSN() {
        var templateMetaData = new JSONObject(MappingTemplate);

        var template = new Template(getContext());
        template.setTemplateName(templateMetaData.getString("templateName"));
        var entityMetaDataArr = templateMetaData.getJSONArray("entityMetaData");
        var entityNameList = new ArrayList<>();
        for (var i = 0; i < entityMetaDataArr.length(); i++) {
            var sheetMetaData = entityMetaDataArr.getJSONObject(i);
            var sheet = new Sheet(getContext());
            sheet.setSheetName(sheetMetaData.getString("excelSheetName"));
            sheet.setHeaderRowStartsAt(sheetMetaData.getInt("headerRowNo"));
            sheet.setDataRowStartsAt(sheetMetaData.getInt("readDataFrom"));
            sheet.setSheet_Template(template);
            entityNameList.add(sheetMetaData.getString("entityName"));

            var columnAttributeMapping = sheetMetaData.getJSONArray("columnMetadata");
            for (var j = 0; j < columnAttributeMapping.length(); j++) {
                var columnData = columnAttributeMapping.getJSONObject(j);
                var attributeMapping = new ColumnAttributeMapping(getContext());
                attributeMapping.setAttribute(columnData.getString("name"));
                attributeMapping.setColumnName(columnData.getString("excelColumnName"));
                attributeMapping.setColumnAttributeMapping_Sheet(sheet);
            }
        }
        /*if (!entityNameList.contains(this.Entity)) {
            throw new CoreException("The entity '" + this.Entity + "' is not present in the '" + template.getTemplateName() + "'.");
        }*/
        return template;
    }

    private File getFile(IContext context, IMendixObject excelDocument) {
        final var file = new File(Core.getConfiguration().getTempPath().getAbsolutePath() + "/Mendix_DataImporter_" + excelDocument.getId().toLong(), "");
        try (var inputStream = Core.getFileDocumentContent(context, excelDocument);
             OutputStream outputstream = new FileOutputStream(file)) {
            final var buffer = new byte[4 * 1024];
            int length;
            while ((length = inputStream.read(buffer)) > 0) {
                outputstream.write(buffer, 0, length);
            }
        } catch (IOException e) {
            throw new DataImporterRuntimeException("You must upload a file document before the columns can be extracted.");
        }
        return file;
    }
	// END EXTRA CODE
}
